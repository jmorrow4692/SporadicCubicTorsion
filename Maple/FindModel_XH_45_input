
# Basis of cuspidal divisors of X1(45), from the file:
#    www.math.fsu.edu/~hoeij/files/X1N/cusp_divisors
# These are the divisors of f[2], f[3], ... from
#    https://www.math.fsu.edu/~hoeij/files/X1N/gonality
# and cusp number i is in entry number i+1.
div := [
       [-1,-41,-37,-11,-29, -5,-7,-17,-13,-1,-1, -1, 1,  7, 11, 1, 19, 23, 3, 31, 7, 13, 43 ],
       [ 0,  1,  2,  1,  4,  1, 2,  7,  8, 1, 2, 11, 4, 13, 14, 1,  7, -1,-1,-17,-5,-11,-41 ],
       [ 0,  1,  2,  1,  4,  1, 2,  7,  8, 1, 2, 11, 3,  6,  3, 0, -3, -6,-1,-12,-3, -6,-21 ],
       [ 0,  2,  4,  2,  8,  2, 4, 14, 16, 2, 3, 12, 3,  6,  3, 0, -3, -6,-1,-17,-5,-11,-41 ],
       [ 0,  1,  2,  1,  4,  1, 2,  7,  5, 0, 0,  0, 0,  0,  0, 0, -3, -6,-1, -7,-1, -1, -1 ],
       [ 0,  2,  4,  2,  8,  2, 4, 10,  5, 0, 0,  0, 1,  6,  3, 0, -3, -6,-1, -7,-2, -5,-20 ],
       [ 0,  3,  6,  3, 12,  3, 5, 10,  5, 0, 0,  0, 0,  0,  0, 0,  0, -1,-1,-12,-3, -6,-21 ],
       [ 0,  4,  8,  4, 16,  4, 5, 10,  5, 0, 1,  1, 0,  0,  0, 0, -6,-12,-2,-14,-2, -5,-20 ],
       [ 0,  0,  0,  0,  0, -1,-1,  0,  0, 0,-1, -1, 2, 13,  9, 0, -3, -5, 0,  0,-1, -1, -1 ],
       [ 0, -1, -2, -1, -4, -3,-2,  4,  8, 0,-2, -2, 3, 12,  6, 0,  3,  0, 0,  0,-1,  0,  0 ],
       [ 0,  2,  4,  2,  5, -1,-1,  4,  5, 0,-1, -1, 0,  0,  0, 0, -3, -5, 0,  2,-1, -1, -1 ],
       [ 0,  0,  0,  0, -7, -4,-3,  7,  5, 0,-1,  0, 2, 13, 12, 0, -3, -4, 0,  0,-1,  1,  1 ],
       [ 0,  2,  4,  2, -3, -3,-2,  0,  0, 0,-1, -1, 2, 12,  6, 0,  6,  0, 0,  0,-2, -2, -2 ],
       [ 0,  3,  6,  3, -3, -3,-1,  0,  0, 0,-2, -2, 4, 12,  6, 0, -6,-10, 0,  0,-1,  2,  2 ],
       [ 0,  3,  6,  2, -7, -4,-2,  4,  8, 0,-3, -3, 2, 13, 14, 0,  0,  0, 0,  0,-2, -2, -2 ],
       [ 0,  2,  4,  0,-15, -6,-4,  8, 15, 0,-3, -1, 4, 26, 15, 0,  1,-10, 0,  2,-3,  0,  1 ],
       [ 0,  4,  8,  1,-11, -5,-4,  8, 10, 0,-2, -2, 5, 24, 12, 0, -6, -9, 0,  0,-2, -2, -2 ],
       [ 0,  4,  8,  0,-15, -7,-5, 12, 10, 0,-4, -4, 6, 25, 20, 0,  0, -5, 0,  4,-4, -1,  1 ],
       [ 0,  7, 14,  2, -7, -5,-4,  7,  5, 0,-3, -3, 2, 13,  9, 0,  1,-10, 0,  0,-1,  0,  0 ],
       [ 0,  8, 16,  2, -7, -7,-5,  4,  8, 0,-4, -1, 4, 24, 12, 0, -3, -3, 0,  0,-4, -1,  2 ],
       [ 0,  8, 16,  1,-11, -7,-4,  4,  8, 0,-2, -1, 5, 25, 20, 0, -6,-15, 0,  2,-3, -2, -2 ],
       [ 0,  8, 15,  0,-17,-11,-6, 12, 20, 0,-5, -5, 8, 38, 27, 0, -2,-14, 0,  0,-5, -2,  2 ]
 ]:

# Degree of each cusp:
deg45 :=  [12, 1, 1, 2, 1, 4, 2, 1, 1, 6, 4, 1, 2, 1, 1, 8, 1, 1, 6, 1, 4, 2, 1 ]:

DegModUnit := proc(D) global deg45;
	# Compute degree of a modular unit from its divisor D
	add(max(0,D[i]) * deg45[i], i=1..23)
end:


# The diamond action 4 that sends cusp number i to cusp number 4*i has order 6.
# The fixed field of this action has genus 5, see: 
#     www.math.fsu.edu/~hoeij/files/X1N/Subfields

# So lets compute the <4>-invariant subset of SPAN_Z(div).

diamond := proc(d,i) local a;
	a := d*i mod 45;
	if a > 22 then 45-a else a fi
end:
Diamond := proc(d,D)
	[D[1], seq(D[1+diamond(d,i)], i=1..22)]
end:


# One way to compute divisors D that are invariant under Diamond(4, ..) is
# to add more entries to D,  namely: BigNumber * (D - Diamond(4,D))
# then take the Z-SPAN of those D's, and then use LLL to find the short vectors
# in there. Due to the factor BigNumber, any short vector will have D - Diamond(4,D) = 0,
# and thus be Diamond(4,..)-invariant, and thus be the divisor of an element of X_H(45).


# The other entries of D are scaled up by a factor   round(10*sqrt(deg45[i]))
# because then short vectors correspond to modular units of low degree.

Extend := proc(D)
	[seq( round(10*sqrt(deg45[i]))*D[i],i=1..23)  , seq(10^10 * (D[1+i] - D[1+diamond(4,i)]), i=1..22)]
end:
V := IntegerRelations:-LLL(map(Extend, div));

# Select short vectors (Diamond-invariant) and reverse the scaling:
V := [seq(`if`({op(v[24..-1])} = {0}, [ seq( 1/round(10*sqrt(deg45[i]))*v[i],i=1..23)  ], NULL), v=V)];


# We have a number of elements of V we could choose, but lets look at their degrees first:
map(DegModUnit, V)/6;

# We want to know not just the degrees of the individual modular units, but also the
# degree of their algebraic relation:
DEG2 := proc(v,w) global deg45; add(max(0,v[i],w[i]) * deg45[i], i=1..23) end: 

seq( [DegModUnit(i), DEG2(i, Diamond(2,i))]/6, i=V);
seq( [DegModUnit(-i), DEG2(-i, Diamond(2,-i))]/6, i=V);

# Based on this, lets pick -V[3] and Diamond(2,-V[3])

div1 := -V[3];
div2 := Diamond(2, -V[3]);

#
# Lets hard-code this choice just in case next time LLL puts the vectors in a different ordering:
#
div1 := [1, 0, -2, 0, 0, -1, 0, -2, -2, 2, -1, 0, 0, -2, 0, 0, 0, -2, 0, 0, -1, 0, -2]:
div2 := [1, -2, 0, 0, -2, -1, 0, 0, 0, 0, -1, -2, 0, 0, -2, 0, -2, 0, 2, -2, -1, 0, 0]:



WriteInTermsOf := proc(v, div) global f;
	subs(solve({op(expand(add(c[i] * div[i], i=1..nops(div)) - v))}), mul(f[i+1]^c[i], i=1..nops(div)))
end:

F1 := WriteInTermsOf(div1, div);
F2 := WriteInTermsOf(div2, div);


# The basis that was used for "div" in  https://www.math.fsu.edu/~hoeij/files/X1N
# was these f[2],f[3],... below, so these next assignments give F1 and F2 the value
# they are supposed to have:

f[2] := b/(16*b^2+(1-20*c-8*c^2)*b+c*(c-1)^3):
f[3] := b:
f[4] := c:
f[5] := b-c:
f[6] := s-1:
f[7] := s-r:
f[8] := r*s-2*r+1:
f[9] := s^2-s-r+1:
f[10] := x-y+1:
f[11] := x^2*y-x*y^2+y-1:
f[12] := x-y:
f[13] := x^3*y-x^2*y^2-x^2*y+x*y^2-y+1:
f[14] := x^2*y-x*y^2-x*y+y^2-1:
f[15] := x^2*y-x^2-x*y^2+x*y-x+y-1:
f[16] := x^2*y^2-2*x^2*y-x*y^3+2*x*y^2-y+1:
f[17] := x^4*y-x^3*y^3-x^3*y+x^2*y^4+x^2*y-x^2-x*y^4+x*y^3-x*y^2+x*y+y^3-2*y^2+y:
f[18] := x^4*y-3*x^3*y^2+x^3*y+2*x^2*y^3+x^2*y^2-2*x^2*y-2*x*y^3+2*x*y^2+y^2-2*y+1:
f[19] := x^5*y^2-3*x^4*y^3+3*x^3*y^4+2*x^3*y^2-2*x^3*y-x^2*y^5-x^2*y^4-x^2*y^3+x^2*y^2+x^2*y+x*y^5-x*y^4+2*x*y^3-2*x*y^2-x*y+x-y^4+2*y^3-y^2:
f[20] := x^4*y-2*x^3*y^2-x^3*y+x^2*y^3+x^2*y^2+2*x^2*y-x^2-2*x*y^2+x*y+y-1:
f[21] := x^5*y^2-3*x^4*y^3-x^4*y^2+3*x^3*y^4+3*x^3*y^3-x^2*y^5-3*x^2*y^4-2*x^2*y^2+3*x^2*y+x*y^5+3*x*y^3-4*x*y^2-y^4+y^3+y-1:
f[22] := x^5*y^2-x^5*y-2*x^4*y^3+2*x^4*y+x^3*y^4+3*x^3*y^3-4*x^3*y^2+x^3-2*x^2*y^4+x^2*y^3+x^2*y^2-x^2*y+x*y^4-x*y^3+x*y^2-x*y-y^3+2*y^2-y:
f[23] := -1+3*y-3*y^2+y^3+4*x^2*y-4*x*y^2-x^3*y-7*x^2*y^2-x^4*y+2*x^3*y^3+2*x^2*y^4-3*x*y^4+8*x*y^3+3*x^5*y^2+3*x^2*y^5-x^2*y^3-2*x*y^5-x^4*y^2-x^5*y+x^7*y^4+x^7*y^2-x^4*y^7-x^2*y^7+x*y^6-x^4*y^3-6*x^3*y^4+5*x^3*y^2-2*x^7*y^3-3*x^6*y^5+4*x^6*y^4+3*x^5*y^6-5*x^5*y^4-3*x^5*y^3-4*x^4*y^6+5*x^4*y^5+6*x^4*y^4+2*x^3*y^7-3*x^3*y^5:

# Recall that F[N] is an equation for X1(N), and we also need the equation for X1(45):

f[45] := x^25*y^10 - 2*x^25*y^9 + x^25*y^8 - 14*x^24*y^11 + 25*x^24*y^10 - 7*x^24*y^9 - 
    4*x^24*y^8 + 91*x^23*y^12 - 140*x^23*y^11 - x^23*y^10 + 39*x^23*y^9 + 
    15*x^23*y^8 - 3*x^23*y^7 - 364*x^22*y^13 + 455*x^22*y^12 + 189*x^22*y^11 - 
    137*x^22*y^10 - 169*x^22*y^9 - 10*x^22*y^8 + 24*x^22*y^7 + 1001*x^21*y^14 - 
    910*x^21*y^13 - 1001*x^21*y^12 + 49*x^21*y^11 + 874*x^21*y^10 + 274*x^21*y^9
    - 158*x^21*y^8 - 66*x^21*y^7 + 3*x^21*y^6 - 2001*x^20*y^15 + 989*x^20*y^14 +
    2887*x^20*y^13 + 1145*x^20*y^12 - 2340*x^20*y^11 - 1929*x^20*y^10 + 
    452*x^20*y^9 + 474*x^20*y^8 + 174*x^20*y^7 - 71*x^20*y^6 + 2994*x^19*y^16 + 
    105*x^19*y^15 - 5572*x^19*y^14 - 4206*x^19*y^13 + 2516*x^19*y^12 + 
    7412*x^19*y^11 - 3*x^19*y^10 - 1773*x^19*y^9 - 1410*x^19*y^8 + 260*x^19*y^7 
    + 173*x^19*y^6 - x^19*y^5 - 3396*x^18*y^17 - 2550*x^18*y^16 + 7716*x^18*y^15
    + 7819*x^18*y^14 + 3012*x^18*y^13 - 16871*x^18*y^12 - 4706*x^18*y^11 + 
    3315*x^18*y^10 + 6213*x^18*y^9 - 172*x^18*y^8 - 829*x^18*y^7 - 464*x^18*y^6 
    + 121*x^18*y^5 + 2919*x^17*y^18 + 5190*x^17*y^17 - 7629*x^17*y^16 - 
    9348*x^17*y^15 - 14249*x^17*y^14 + 22109*x^17*y^13 + 17334*x^17*y^12 + 
    165*x^17*y^11 - 17040*x^17*y^10 - 2997*x^17*y^9 + 2096*x^17*y^8 + 
    2854*x^17*y^7 - 213*x^17*y^6 - 267*x^17*y^5 - 1876*x^16*y^19 - 
    6265*x^16*y^18 + 4691*x^16*y^17 + 8346*x^16*y^16 + 22131*x^16*y^15 - 
    11993*x^16*y^14 - 33543*x^16*y^13 - 13631*x^16*y^12 + 25357*x^16*y^11 + 
    16967*x^16*y^10 - 1840*x^16*y^9 - 9776*x^16*y^8 - 851*x^16*y^7 + 
    1023*x^16*y^6 + 594*x^16*y^5 - 126*x^16*y^4 + 875*x^15*y^20 + 5138*x^15*y^19
    - 413*x^15*y^18 - 6485*x^15*y^17 - 18825*x^15*y^16 - 10206*x^15*y^15 + 
    40922*x^15*y^14 + 27468*x^15*y^13 - 10048*x^15*y^12 - 42950*x^15*y^11 - 
    7726*x^15*y^10 + 19477*x^15*y^9 + 8340*x^15*y^8 - 2405*x^15*y^7 - 
    2988*x^15*y^6 + 69*x^15*y^5 + 252*x^15*y^4 - 280*x^14*y^21 - 2905*x^14*y^20 
    - 2471*x^14*y^19 + 4305*x^14*y^18 + 8919*x^14*y^17 + 25908*x^14*y^16 - 
    32332*x^14*y^15 - 25927*x^14*y^14 - 27494*x^14*y^13 + 57159*x^14*y^12 + 
    28748*x^14*y^11 - 13625*x^14*y^10 - 30594*x^14*y^9 + 1589*x^14*y^8 + 
    8410*x^14*y^7 + 1678*x^14*y^6 - 960*x^14*y^5 - 432*x^14*y^4 + 84*x^14*y^3 + 
    55*x^13*y^22 + 1090*x^13*y^21 + 2685*x^13*y^20 - 1663*x^13*y^19 - 
    1832*x^13*y^18 - 23936*x^13*y^17 + 13646*x^13*y^16 + 14300*x^13*y^15 + 
    47095*x^13*y^14 - 33085*x^13*y^13 - 44549*x^13*y^12 - 19209*x^13*y^11 + 
    52224*x^13*y^10 + 11039*x^13*y^9 - 10784*x^13*y^8 - 11527*x^13*y^7 + 
    2818*x^13*y^6 + 1870*x^13*y^5 - 27*x^13*y^4 - 144*x^13*y^3 - 5*x^12*y^23 - 
    245*x^12*y^22 - 1435*x^12*y^21 - 295*x^12*y^20 - 262*x^12*y^19 + 
    12041*x^12*y^18 + 2782*x^12*y^17 - 8860*x^12*y^16 - 27080*x^12*y^15 - 
    13667*x^12*y^14 + 44216*x^12*y^13 + 39908*x^12*y^12 - 31347*x^12*y^11 - 
    34197*x^12*y^10 - 5612*x^12*y^9 + 31213*x^12*y^8 - 1741*x^12*y^7 - 
    4915*x^12*y^6 - 1306*x^12*y^5 + 651*x^12*y^4 + 180*x^12*y^3 - 36*x^12*y^2 + 
    25*x^11*y^23 + 410*x^11*y^22 + 700*x^11*y^21 + 390*x^11*y^20 - 
    2736*x^11*y^19 - 8559*x^11*y^18 + 8207*x^11*y^17 - 1670*x^11*y^16 + 
    40313*x^11*y^15 - 37110*x^11*y^14 - 13665*x^11*y^13 - 26528*x^11*y^12 + 
    45802*x^11*y^11 + 28175*x^11*y^10 - 31739*x^11*y^9 - 11196*x^11*y^8 + 
    3219*x^11*y^7 + 8895*x^11*y^6 - 2259*x^11*y^5 - 780*x^11*y^4 + 62*x^11*y^3 +
    45*x^11*y^2 - 50*x^10*y^23 - 315*x^10*y^22 - 290*x^10*y^21 - 395*x^10*y^20 +
    5486*x^10*y^19 - 4267*x^10*y^18 + 9529*x^10*y^17 - 31819*x^10*y^16 + 
    24211*x^10*y^15 - 16670*x^10*y^14 + 53050*x^10*y^13 - 32990*x^10*y^12 - 
    21400*x^10*y^11 - 4066*x^10*y^10 + 24771*x^10*y^9 + 9888*x^10*y^8 - 
    17166*x^10*y^7 - 411*x^10*y^6 + 2907*x^10*y^5 + 285*x^10*y^4 - 258*x^10*y^3 
    - 39*x^10*y^2 + 9*x^10*y + 50*x^9*y^23 + 135*x^9*y^22 + 425*x^9*y^21 - 
    1310*x^9*y^20 + 65*x^9*y^19 - 3986*x^9*y^18 + 10201*x^9*y^17 - 4081*x^9*y^16
    + 8936*x^9*y^15 - 23100*x^9*y^14 + 2425*x^9*y^13 + 7316*x^9*y^12 + 
    22872*x^9*y^11 - 14449*x^9*y^10 - 16689*x^9*y^9 + 4269*x^9*y^8 + 
    12219*x^9*y^7 - 3339*x^9*y^6 - 2991*x^9*y^5 + 840*x^9*y^4 + 243*x^9*y^3 - 
    45*x^9*y^2 - 6*x^9*y - 25*x^8*y^23 - 95*x^8*y^22 - 115*x^8*y^21 + 
    665*x^8*y^20 + 157*x^8*y^19 + 1517*x^8*y^18 - 7512*x^8*y^17 + 8598*x^8*y^16 
    - 12740*x^8*y^15 + 26890*x^8*y^14 - 23353*x^8*y^13 + 9368*x^8*y^12 - 
    15965*x^8*y^11 + 11534*x^8*y^10 + 15419*x^8*y^9 - 18822*x^8*y^8 + 
    2508*x^8*y^7 + 824*x^8*y^6 + 2667*x^8*y^5 - 1701*x^8*y^4 + 128*x^8*y^3 + 
    51*x^8*y^2 + 3*x^8*y - x^8 + 5*x^7*y^23 + 80*x^7*y^22 - 110*x^7*y^21 + 
    240*x^7*y^20 - 2021*x^7*y^19 + 4923*x^7*y^18 - 8247*x^7*y^17 + 
    17330*x^7*y^16 - 29821*x^7*y^15 + 34947*x^7*y^14 - 37130*x^7*y^13 + 
    36206*x^7*y^12 - 16752*x^7*y^11 - 6778*x^7*y^10 + 10605*x^7*y^9 - 
    8670*x^7*y^8 + 12412*x^7*y^7 - 10385*x^7*y^6 + 3154*x^7*y^5 + 174*x^7*y^4 - 
    123*x^7*y^3 - 51*x^7*y^2 + 12*x^7*y - 25*x^6*y^22 - 40*x^6*y^21 + 
    310*x^6*y^20 - 530*x^6*y^19 + 1731*x^6*y^18 - 5761*x^6*y^17 + 11015*x^6*y^16
    - 16064*x^6*y^15 + 22390*x^6*y^14 - 24779*x^6*y^13 + 17128*x^6*y^12 - 
    6073*x^6*y^11 - 3331*x^6*y^10 + 13710*x^6*y^9 - 18887*x^6*y^8 + 
    13336*x^6*y^7 - 5659*x^6*y^6 + 2645*x^6*y^5 - 1650*x^6*y^4 + 615*x^6*y^3 - 
    78*x^6*y^2 - 3*x^6*y + 55*x^5*y^21 - 190*x^5*y^20 + 223*x^5*y^19 - 
    365*x^5*y^18 + 1115*x^5*y^17 - 1562*x^5*y^16 + 987*x^5*y^15 - 1443*x^5*y^14 
    + 3987*x^5*y^13 - 7044*x^5*y^12 + 10702*x^5*y^11 - 14503*x^5*y^10 + 
    14925*x^5*y^9 - 11927*x^5*y^8 + 9089*x^5*y^7 - 6681*x^5*y^6 + 3552*x^5*y^5 -
    1020*x^5*y^4 + 95*x^5*y^3 + 6*x^5*y - x^5 - 70*x^4*y^20 + 434*x^4*y^19 - 
    1274*x^4*y^18 + 2769*x^4*y^17 - 5645*x^4*y^16 + 10374*x^4*y^15 - 
    15669*x^4*y^14 + 19647*x^4*y^13 - 21474*x^4*y^12 + 20629*x^4*y^11 - 
    17174*x^4*y^10 + 12800*x^4*y^9 - 9003*x^4*y^8 + 5750*x^4*y^7 - 3099*x^4*y^6 
    + 1545*x^4*y^5 - 840*x^4*y^4 + 405*x^4*y^3 - 120*x^4*y^2 + 15*x^4*y + 
    56*x^3*y^19 - 448*x^3*y^18 + 1684*x^3*y^17 - 4148*x^3*y^16 + 7941*x^3*y^15 -
    12837*x^3*y^14 + 17616*x^3*y^13 - 20028*x^3*y^12 + 18606*x^3*y^11 - 
    14117*x^3*y^10 + 8776*x^3*y^9 - 4588*x^3*y^8 + 2309*x^3*y^7 - 1383*x^3*y^6 +
    876*x^3*y^5 - 420*x^3*y^4 + 120*x^3*y^3 - 15*x^3*y^2 - 28*x^2*y^18 + 
    260*x^2*y^17 - 1118*x^2*y^16 + 2999*x^2*y^15 - 5736*x^2*y^14 + 8475*x^2*y^13
    - 10116*x^2*y^12 + 9870*x^2*y^11 - 7764*x^2*y^10 + 4787*x^2*y^9 - 
    2231*x^2*y^8 + 767*x^2*y^7 - 236*x^2*y^6 + 141*x^2*y^5 - 126*x^2*y^4 + 
    84*x^2*y^3 - 36*x^2*y^2 + 9*x^2*y - x^2 + 8*x*y^17 - 82*x*y^16 + 385*x*y^15 
    - 1100*x*y^14 + 2145*x*y^13 - 3036*x*y^12 + 3234*x*y^11 - 2640*x*y^10 + 
    1650*x*y^9 - 770*x*y^8 + 253*x*y^7 - 52*x*y^6 + 5*x*y^5 - y^16 + 11*y^15 - 
    55*y^14 + 165*y^13 - 330*y^12 + 462*y^11 - 462*y^10 + 330*y^9 - 165*y^8 + 
    55*y^7 - 11*y^6 + y^5:


# Some of the f[i]'s were not written in terms of x,y but here are their conversions:

F1 := factor(subs({c = r*s-s, b = r^2*s-r*s}, {r = (x^2*y-x*y+y-1)/(x^2*y-x), s = (x*y-y+1)/(x*y)}, F1));
F2 := factor(subs({c = r*s-s, b = r^2*s-r*s}, {r = (x^2*y-x*y+y-1)/(x^2*y-x), s = (x*y-y+1)/(x*y)}, F2));


# Summary so far:  F1, F2 are modular units, they are <4>-invariant and are thus in X_H(45).
# Next we want their algebraic relation, and if that has the correct genus, then we have:
#  (a) generators F1,F2 of X_H(45) and
#  (b) an equation for X_H(45).



# Make an ansatz for the algebraic relation.  From the "DegModUnit" computation above
# we know that the degree w.r.t. each variable is 4.
# With the "DEG2" program we selected F1,F2 in a way meant to minimize the total degree
# and it was 6. So we can write the algebraic relation between F1,F2 like this:

Ansatz := add(add( a[i,j]*X^i*Y^j, j=0..min(4,6-i)),i=0..4);

# Now we need linear equations for the a[i,j]:

x0 := -1; y0 := RootOf(subs(x=x0,f[45])):
F1v := evala(subs(x=x0,y=y0, F1)):
F2v := evala(subs(x=x0,y=y0, F2)):
P := primpart(subs(solve({coeffs(evala(Expand(subs(X=F1v, Y=F2v, Ansatz))), y0)}), Ansatz),{X,Y});

# Note that P is symmetric in X,Y and thus we can write P(X,Y) = Q(X*Y, X+Y) for some
# polynomial Q.
